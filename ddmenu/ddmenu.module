<?php

# $Id$

// Sets the number of blocks available from this module
Oop_Core_ClassManager::getInstance()->getModule( 'ddmenu' )->setNumberOfBlocks(
    Oop_Drupal_Utils::getInstance()->getModuleVariable(
        'ddmenu',
        'number_of_blocks',
        1
    ),
    true
);

/**
 * Drupal 'help' hook
 * 
 * This function returns the help text for the admin/help# page. The label
 * returned must be placed in the module's lang file, in the 'lang/'
 * directory. It's the 'help' node of the 'system' section.
 * 
 * @param   string  The path for which to display help
 * @param   array   An array that holds the current path as would be returned from the arg() function
 * @return  string  The help text
 * @see     Oop_Drupal_Hooks::help
 */
function ddmenu_help( $path, $arg )
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'ddmenu' )->help( $path, $arg );
}

/**
 * Drupal 'perm' hook
 * 
 * This function returns the available permissions for the module. They must
 * be declared in the $_perm property of the module class.
 * 
 * @return  array   The permissions array
 * @see     Oop_Drupal_Hooks::perm
 */
function ddmenu_perm()
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'ddmenu' )->perm();
}

/**
 * Drupal 'block' hook
 * 
 * This function lets Drupal know that the module has block content. The method
 * used to generate the block content is getBlock(), defined in the module
 * class.
 * 
 * @param   string  The kind of block to display
 * @param   int     The delta offset, used to generate different contents for different blocks
 * @param   array   The edited items (only if $op is 'save')
 * @return  array   The Drupal block
 * @see     Oop_Drupal_Hooks::block
 * @see     ddmenu::getBlock
 */
function ddmenu_block( $op = 'list', $delta = 0, array $edit = array() )
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'ddmenu' )->block( $op, $delta, $edit );
}

/**
 * Drupal 'menu' hook
 * 
 * This function lets Drupal know that the module has custom menu items.
 * An administration settings page will be automatically added if the file
 * 'settings/admin.form.php' exists.
 * 
 * @return  array   An array with the menu items
 * @see     Oop_Drupal_Hooks::menu
 */
function ddmenu_menu()
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'ddmenu' )->menu();
}

/**
 * Gets the admin form
 * 
 * This function returns the form configuration for the administration settings
 * page. The form configuration must be defined in the 'settings/admin.form.php'
 * file.
 * 
 * @return  array   An array with the form configuration
 * @see     Oop_Drupal_Hooks::getAdminForm
 */
function ddmenu_adminForm()
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'ddmenu' )->getAdminForm();
}

/**
 * Validates the admin form
 * 
 * This function will be called when the form in the administration settings
 * page is submitted.
 * 
 * @param   array   The form configuration
 * @param   array   The submitted values
 * @return  NULL
 * @see     ddmenu::validateAdminForm
 */
function ddmenu_adminForm_validate( $form, &$formState )
{
    Oop_Core_ClassManager::getInstance()->getModule( 'ddmenu' )->validateAdminForm( $form, $formState );
}
