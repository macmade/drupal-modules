<?php

// Checks the PHP version
if( ( double )PHP_VERSION < 5 ) {
    
    // We are running PHP4
    print 'PHP version 5 is required to use this script (actual version is ' . PHP_VERSION . ')';
    exit();
}

// Checks for the SPL
if( !function_exists( 'spl_autoload_register' ) ) {
    
    // The SPL is unavailable
    throw new Exception( 'The SPL (Standard PHP Library) is required to use this script' );
}

// Includes the class manager
require_once(
    dirname( __FILE__ )
  . DIRECTORY_SEPARATOR
  . 'classes'
  . DIRECTORY_SEPARATOR
  . 'Oop'
  . DIRECTORY_SEPARATOR
  . 'Core'
  . DIRECTORY_SEPARATOR
  . 'ClassManager.class.php'
);

// Checks the PHP version required to use the class manager
if( version_compare( PHP_VERSION, Oop_Core_ClassManager::PHP_COMPATIBLE, '<' ) ) {
    
    // PHP version is too old
    trigger_error( 'Class ClassManager requires PHP version ' . Oop_Core_ClassManager::PHP_COMPATIBLE . ' (actual version is ' . PHP_VERSION . ')' , E_USER_ERROR );
}

// Registers an SPL autoload method to use to load the classes form this package
spl_autoload_register( array( 'Oop_Core_ClassManager', 'autoLoad' ) );

// Sets the substitution character for the @ sign
Oop_Drupal_ModuleBase::setEmailCryptSymbol( variable_get( 'oop_email_crypt_symbol', '(at)' ) );

/**
 * Drupal 'perm' hook
 * 
 * @return  array   The permissions array for the module
 */
function oop_perm()
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'shell' )->perm();
}

/**
 * Drupal 'menu' hook
 * 
 * @return  array   The menu items
 */
function oop_menu()
{
    $module = Oop_Core_ClassManager::getInstance()->getModule( 'oop' );
    return $module->addMenuItems( $module->addAdminSettingsMenu() );
}

/**
 * Drupal 'menu' callback for the administration settings
 * 
 * @return  string  The configuration form
 */
function oop_adminForm()
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'oop' )->getAdminForm();
}

/**
 * Drupal 'show' hook
 * 
 * @return  string  The content of the module's view
 */
function oop_show()
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'oop' )->createModuleContent( 'show' );
}

/**
 * 
 */
function oop_getModuleFormConf()
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'oop' )->getModuleFormConf();
}
