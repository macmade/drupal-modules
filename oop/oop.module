<?php

# $Id$

// Checks the PHP version
if( ( double )PHP_VERSION < 5 ) {
    
    // We are running PHP4
    print 'PHP version 5 is required to use this script (actual version is ' . PHP_VERSION . ')';
    exit();
}

// Checks for the SPL
if( !function_exists( 'spl_autoload_register' ) ) {
    
    // The SPL is unavailable
    throw new Exception( 'The SPL (Standard PHP Library) is required to use this script' );
}

// Includes the class manager
require_once(
    dirname( __FILE__ )
  . DIRECTORY_SEPARATOR
  . 'classes'
  . DIRECTORY_SEPARATOR
  . 'Oop'
  . DIRECTORY_SEPARATOR
  . 'Core'
  . DIRECTORY_SEPARATOR
  . 'ClassManager.class.php'
);

// Registers an SPL autoload method to use to load the classes form this package
spl_autoload_register( array( 'Oop_Core_ClassManager', 'autoLoad' ) );

// Sets the HTML formatting option
Oop_Xhtml_Tag::useFormattedOutput( Oop_Drupal_Utils::getInstance()->getModuleVariable( 'oop', 'html_format', 1 ) );

// Sets the substitution character for the @ sign
Oop_Drupal_ModuleBase::setEmailCryptSymbol( Oop_Drupal_Utils::getInstance()->getModuleVariable( 'oop', 'email_crypt_symbol', '(at)' ) );

// Sets the default language
Oop_Lang_Getter::setDefaultLanguage( Oop_Drupal_Utils::getInstance()->getModuleVariable( 'oop', 'default_language', 'en' ) );

/**
 * Drupal 'help' hook
 * 
 * This function returns the help text for the admin/help# page. The label
 * returned must be placed in the module's lang file, in the 'lang/'
 * directory. It's the 'help' node of the 'system' section.
 * 
 * @param   string  The path for which to display help
 * @param   array   An array that holds the current path as would be returned from the arg() function
 * @return  string  The help text
 * @see     Oop_Drupal_Hooks::help
 */
function oop_help( $path, $arg )
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'oop' )->help( $path, $arg );
}

/**
 * Drupal 'perm' hook
 * 
 * This function returns the available permissions for the module. They must
 * be declared in the $_perm property of the module class.
 * 
 * @return  array   The permissions array
 * @see     Oop_Drupal_Hooks::perm
 */
function oop_perm()
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'oop' )->perm();
}

/**
 * Drupal 'menu' hook
 * 
 * This function lets Drupal know that the module has custom menu items.
 * An administration settings page can be automatically added with the
 * Oop_Drupal_Hooks::addAdminSettingsMenu() method.
 * 
 * @return  array   An array with the menu items
 * @see     Oop_Drupal_Hooks::addMenuItems
 * @see     Oop_Drupal_Hooks::addAdminSettingsMenu
 * @see     Oop_Drupal_Hooks::perm
 */
function oop_menu()
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'oop' )->addAdminSettingsMenu();
}

/**
 * Gets the admin form
 * 
 * This function returns the form configuration for the administration settings
 * page. The form configuration must be defined in the 'settings/admin.form.php'
 * file.
 * 
 * @return  array   An array with the form configuration
 * @see     Oop_Drupal_Hooks::getAdminForm
 */
function oop_adminForm()
{
    return Oop_Core_ClassManager::getInstance()->getModule( 'oop' )->getAdminForm();
}

/**
 * Submission callback for the administration settings form
 * 
 * This function is a replacement for the built-in system_settings_form_submit()
 * function. It's used to store all the fields in the 'oop_modules_variables'
 * table instead of the default 'variable' table.
 * 
 * @param   array   The form configuration
 * @param   array   The submitted form values
 * @return  NULL
 * @see     Oop_Drupal_Hooks::getAdminForm
 */
function oop_submitAdminForm( array $form, array &$formState )
{
    Oop_Core_ClassManager::getInstance()->getModule( 'oop' )->submitAdminForm( $form, $formState );
}
